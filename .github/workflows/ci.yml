name: CI/CD Pipeline with Docker

on:
  push:
    branches: [ main, develop, feature-digital ]
  pull_request:
    branches: [ feature-digital ]

jobs:
  build:
    runs-on: ubuntu-latest
    container: ubuntu:latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install build tools
      run: |
        apt-get update
        apt-get install -y build-essential gcc make
        # Verify installation completed
        dpkg -l | grep build-essential
    
    - name: Debug environment
      run: |
        echo "Current user: $(whoami)"
        echo "PATH: $PATH"
        echo "Contents of /usr/bin (make related):"
        ls -la /usr/bin/ | grep make || echo "No make found in /usr/bin"
        echo "Searching for make executable:"
        find /usr -name "make" 2>/dev/null || echo "make not found"
        
    - name: Manual make setup (fallback)
      run: |
        # Try alternative installation methods
        if ! command -v make >/dev/null 2>&1; then
          echo "make not found, trying alternative installation"
          apt-get install -y make
          # If still not found, try installing from source
          if ! command -v make >/dev/null 2>&1; then
            echo "Installing make manually"
            apt-get install -y wget
            cd /tmp
            wget http://ftp.gnu.org/gnu/make/make-4.3.tar.gz
            tar -xzf make-4.3.tar.gz
            cd make-4.3
            ./configure --prefix=/usr/local
            make && make install
            ln -sf /usr/local/bin/make /usr/bin/make
          fi
        fi
    
    - name: Verify tools are working
      run: |
        command -v gcc && gcc --version
        command -v make && make --version
    
    - name: Compile the project
      run: |
        # Use command -v to get the actual path
        MAKE_PATH=$(command -v make)
        echo "Using make at: $MAKE_PATH"
        $MAKE_PATH
    
    - name: Run the program  
      run: |
        MAKE_PATH=$(command -v make)
        $MAKE_PATH run
    
    - name: Check for memory leaks (optional)
      run: |
        sudo apt-get install -y valgrind
        valgrind --leak-check=full --error-exitcode=1 ./main

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t ci-cd-test:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm ci-cd-test:latest
    
    - name: Build multi-stage Docker image
      run: |
        docker build -f Dockerfile.multistage -t ci-cd-test:multistage .
    
    - name: Test multi-stage Docker image
      run: |
        docker run --rm ci-cd-test:multistage
    
    - name: Show Docker images
      run: |
        docker images | grep ci-cd-test

  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: mingw-w64-x86_64-gcc mingw-w64-x86_64-make
        update: true
    
    - name: Compile the project (Windows)
      shell: msys2 {0}
      run: make
    
    - name: Run the program (Windows)
      shell: msys2 {0}
      run: make run

  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        # macOS comes with make by default, but let's make sure
        command -v make || brew install make
        command -v gcc || brew install gcc
    
    - name: Compile the project (macOS)
      run: make
    
    - name: Run the program (macOS)
      run: make run
